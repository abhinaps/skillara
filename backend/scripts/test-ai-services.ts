import dotenv from 'dotenv';
import { GeminiAIService } from '../src/infrastructure/ai/GeminiAIService';
import { HuggingFaceAIService } from '../src/infrastructure/ai/HuggingFaceAIService';
import { AIProviderConfig } from '../src/domain/services/ai/interfaces';

// Load environment variables
dotenv.config();

/**
 * Comprehensive AI Services Test Suite
 * Tests Google Gemini, Hugging Face, and multi-provider functionality
 */

const testResume = `
Sarah Johnson - Senior Software Engineer
Email: sarah.johnson@email.com | Phone: (555) 987-6543

PROFESSIONAL SUMMARY
Senior Software Engineer with 6+ years of experience in full-stack development. Specialized in React, Node.js, and AWS cloud technologies. Strong background in microservices architecture, containerization, and CI/CD pipelines. Proven ability to lead cross-functional teams and deliver scalable enterprise solutions.

TECHNICAL SKILLS
‚Ä¢ Frontend: React, Next.js, TypeScript, JavaScript, HTML5, CSS3, Sass, Tailwind CSS, Redux
‚Ä¢ Backend: Node.js, Express.js, Python, Django, REST APIs, GraphQL, Microservices
‚Ä¢ Databases: PostgreSQL, MongoDB, Redis, DynamoDB, Elasticsearch
‚Ä¢ Cloud & DevOps: AWS (EC2, S3, Lambda, ECS, RDS), Docker, Kubernetes, Jenkins, GitHub Actions, Terraform
‚Ä¢ Testing: Jest, React Testing Library, Cypress, Selenium, Unit Testing, Integration Testing
‚Ä¢ Tools: Git, GitHub, VS Code, Figma, Postman, Jira, Confluence

PROFESSIONAL EXPERIENCE

Senior Software Engineer - CloudTech Solutions (2021 - Present)
‚Ä¢ Architected and developed microservices-based e-commerce platform using React and Node.js
‚Ä¢ Implemented serverless functions on AWS Lambda reducing infrastructure costs by 30%
‚Ä¢ Led migration from monolithic to microservices architecture serving 500K+ daily users
‚Ä¢ Mentored 3 junior developers and established code review best practices
‚Ä¢ Implemented automated testing pipeline achieving 95% code coverage

Software Engineer - FinanceApp Inc (2019 - 2021)
‚Ä¢ Built responsive web applications using React, Redux, and TypeScript
‚Ä¢ Developed RESTful APIs using Node.js and Express with PostgreSQL database
‚Ä¢ Implemented real-time data processing using WebSocket connections
‚Ä¢ Optimized database queries reducing response times by 40%
‚Ä¢ Collaborated with product team using Agile methodologies

Frontend Developer - StartupHub (2018 - 2019)
‚Ä¢ Created interactive user interfaces using React and modern JavaScript
‚Ä¢ Integrated third-party APIs and payment gateways (Stripe, PayPal)
‚Ä¢ Implemented responsive designs using CSS Grid and Flexbox
‚Ä¢ Worked closely with UX designers using Figma for design handoffs

EDUCATION
Master of Science in Computer Science
Stanford University, 2018

Bachelor of Science in Software Engineering
UC Berkeley, 2016

CERTIFICATIONS
‚Ä¢ AWS Certified Solutions Architect - Associate
‚Ä¢ Certified Kubernetes Administrator (CKA)
‚Ä¢ Scrum Master Certification (PSM I)

PROJECTS
SaaS Analytics Dashboard (2023)
‚Ä¢ Full-stack application built with Next.js, TypeScript, and AWS
‚Ä¢ Implemented real-time analytics using WebSocket and Redis
‚Ä¢ Used Docker for containerization and deployed on AWS ECS
‚Ä¢ Achieved 99.9% uptime with auto-scaling capabilities

Open Source Contribution (2022)
‚Ä¢ Contributed to popular React component library (5K+ GitHub stars)
‚Ä¢ Implemented accessibility improvements and performance optimizations
‚Ä¢ Maintained comprehensive test suite using Jest and React Testing Library
`;

interface TestResult {
  provider: string;
  success: boolean;
  skillsFound: number;
  accuracy: number;
  processingTime: number;
  confidence: number;
  errors?: string[];
}

class AIServiceTester {
  private expectedSkills = [
    'React', 'Node.js', 'PostgreSQL', 'TypeScript', 'JavaScript',
    'Python', 'Django', 'MongoDB', 'AWS', 'Docker', 'Kubernetes',
    'Redux', 'GraphQL', 'Jest', 'Git', 'Figma', 'Leadership',
    'Next.js', 'Express.js', 'Redis', 'Cypress', 'Terraform'
  ];

  async testGeminiService(): Promise<TestResult> {
    console.log('ü§ñ Testing Google Gemini AI Service...');

    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey) {
      return {
        provider: 'Gemini',
        success: false,
        skillsFound: 0,
        accuracy: 0,
        processingTime: 0,
        confidence: 0,
        errors: ['GEMINI_API_KEY not found in environment']
      };
    }

    try {
      const config: AIProviderConfig = { apiKey };
      const geminiService = new GeminiAIService(config);

      const result = await geminiService.extractSkills(testResume);
      const accuracy = this.calculateAccuracy(result.skills.map(s => s.standardizedName));

      console.log(`   ‚úÖ Skills extracted: ${result.skills.length}`);
      console.log(`   üìä Accuracy: ${accuracy.toFixed(1)}%`);
      console.log(`   ‚ö° Processing time: ${result.processingTime}ms`);
      console.log(`   üéØ Provider: ${result.provider}`);

      return {
        provider: result.provider,
        success: true,
        skillsFound: result.skills.length,
        accuracy,
        processingTime: result.processingTime,
        confidence: result.confidence * 100
      };

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.log(`   ‚ùå Error: ${errorMessage}`);
      return {
        provider: 'Gemini',
        success: false,
        skillsFound: 0,
        accuracy: 0,
        processingTime: 0,
        confidence: 0,
        errors: [errorMessage]
      };
    }
  }

  async testHuggingFaceService(): Promise<TestResult> {
    console.log('\nü§ó Testing Hugging Face AI Service...');

    const apiKey = process.env.HUGGINGFACE_API_KEY;
    if (!apiKey) {
      return {
        provider: 'HuggingFace',
        success: false,
        skillsFound: 0,
        accuracy: 0,
        processingTime: 0,
        confidence: 0,
        errors: ['HUGGINGFACE_API_KEY not found in environment']
      };
    }

    try {
      const config: AIProviderConfig = { apiKey };
      const huggingfaceService = new HuggingFaceAIService(config);

      const result = await huggingfaceService.extractSkills(testResume);
      const accuracy = this.calculateAccuracy(result.skills.map(s => s.standardizedName));

      console.log(`   ‚úÖ Skills extracted: ${result.skills.length}`);
      console.log(`   üìä Accuracy: ${accuracy.toFixed(1)}%`);
      console.log(`   ‚ö° Processing time: ${result.processingTime}ms`);
      console.log(`   üéØ Provider: ${result.provider}`);

      return {
        provider: result.provider,
        success: true,
        skillsFound: result.skills.length,
        accuracy,
        processingTime: result.processingTime,
        confidence: result.confidence * 100
      };

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.log(`   ‚ùå Error: ${errorMessage}`);
      return {
        provider: 'HuggingFace',
        success: false,
        skillsFound: 0,
        accuracy: 0,
        processingTime: 0,
        confidence: 0,
        errors: [errorMessage]
      };
    }
  }

  private calculateAccuracy(foundSkills: string[]): number {
    const normalizedFound = foundSkills.map(skill => skill.toLowerCase());
    const expectedFound = this.expectedSkills.filter(expected =>
      normalizedFound.some(found => found.includes(expected.toLowerCase()))
    );
    return (expectedFound.length / this.expectedSkills.length) * 100;
  }

  async runProviderComparison(): Promise<void> {
    console.log('\nüîÑ MULTI-PROVIDER COMPARISON TEST');
    console.log('=====================================');

    const results: TestResult[] = [];

    // Test Gemini
    const geminiResult = await this.testGeminiService();
    results.push(geminiResult);

    // Test Hugging Face
    const huggingfaceResult = await this.testHuggingFaceService();
    results.push(huggingfaceResult);

    // Display comparison
    console.log('\nüìä PROVIDER COMPARISON RESULTS:');
    console.log('=====================================');

    results.forEach(result => {
      console.log(`\nüî∏ ${result.provider.toUpperCase()}:`);
      console.log(`   Status: ${result.success ? '‚úÖ Success' : '‚ùå Failed'}`);
      console.log(`   Skills Found: ${result.skillsFound}`);
      console.log(`   Accuracy: ${result.accuracy.toFixed(1)}%`);
      console.log(`   Processing Time: ${result.processingTime}ms`);
      console.log(`   Confidence: ${result.confidence.toFixed(1)}%`);

      if (result.errors && result.errors.length > 0) {
        console.log(`   Errors: ${result.errors.join(', ')}`);
      }
    });

    // Find best performer
    const successfulResults = results.filter(r => r.success);
    if (successfulResults.length > 0) {
      const bestAccuracy = successfulResults.reduce((prev, current) =>
        prev.accuracy > current.accuracy ? prev : current
      );
      const fastestProvider = successfulResults.reduce((prev, current) =>
        prev.processingTime < current.processingTime ? prev : current
      );

      console.log('\nüèÜ PERFORMANCE WINNERS:');
      console.log(`   üéØ Best Accuracy: ${bestAccuracy.provider} (${bestAccuracy.accuracy.toFixed(1)}%)`);
      console.log(`   ‚ö° Fastest: ${fastestProvider.provider} (${fastestProvider.processingTime}ms)`);
    }

    // Test fallback scenarios
    await this.testFallbackScenarios();
  }

  async testFallbackScenarios(): Promise<void> {
    console.log('\nüõ°Ô∏è FALLBACK SCENARIO TESTING');
    console.log('=====================================');

    console.log('\nüß™ Testing with invalid API keys...');

    // Test Gemini with invalid key
    try {
      const invalidConfig: AIProviderConfig = { apiKey: 'invalid_key_123' };
      const geminiService = new GeminiAIService(invalidConfig);
      const result = await geminiService.extractSkills(testResume);

      console.log(`   ‚úÖ Gemini fallback working: ${result.provider} provider used`);
      console.log(`   üìä Fallback accuracy: ${this.calculateAccuracy(result.skills.map(s => s.standardizedName)).toFixed(1)}%`);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.log(`   ‚ùå Gemini fallback failed: ${errorMessage}`);
    }

    // Test HuggingFace with invalid key
    try {
      const invalidConfig: AIProviderConfig = { apiKey: 'invalid_key_123' };
      const hfService = new HuggingFaceAIService(invalidConfig);
      const result = await hfService.extractSkills(testResume);

      console.log(`   ‚úÖ HuggingFace fallback working: ${result.provider} provider used`);
      console.log(`   üìä Fallback accuracy: ${this.calculateAccuracy(result.skills.map(s => s.standardizedName)).toFixed(1)}%`);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.log(`   ‚ùå HuggingFace fallback failed: ${errorMessage}`);
    }
  }

  async testSkillCategories(): Promise<void> {
    console.log('\nüè∑Ô∏è SKILL CATEGORIZATION TEST');
    console.log('=====================================');

    const geminiConfig: AIProviderConfig = { apiKey: process.env.GEMINI_API_KEY || 'test' };
    const geminiService = new GeminiAIService(geminiConfig);

    try {
      const result = await geminiService.extractSkills(testResume);

      const categories = result.skills.reduce((acc, skill) => {
        if (!acc[skill.category]) {
          acc[skill.category] = [];
        }
        acc[skill.category].push(skill.name);
        return acc;
      }, {} as Record<string, string[]>);

      console.log('\nüìÇ Skills by Category:');
      Object.entries(categories).forEach(([category, skills]) => {
        console.log(`   ${category.toUpperCase()}: ${skills.slice(0, 5).join(', ')}${skills.length > 5 ? '...' : ''} (${skills.length} total)`);
      });

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.log(`   ‚ùå Categorization test failed: ${errorMessage}`);
    }
  }

  async runHealthChecks(): Promise<void> {
    console.log('\nüè• HEALTH CHECK TESTS');
    console.log('=====================================');

    // Gemini Health Check
    if (process.env.GEMINI_API_KEY) {
      const geminiConfig: AIProviderConfig = { apiKey: process.env.GEMINI_API_KEY };
      const geminiService = new GeminiAIService(geminiConfig);
      const geminiHealthy = await geminiService.isHealthy();
      console.log(`   ü§ñ Gemini API: ${geminiHealthy ? '‚úÖ Healthy' : '‚ö†Ô∏è Unavailable (fallback active)'}`);
    }

    // HuggingFace Health Check
    if (process.env.HUGGINGFACE_API_KEY) {
      const hfConfig: AIProviderConfig = { apiKey: process.env.HUGGINGFACE_API_KEY };
      const hfService = new HuggingFaceAIService(hfConfig);
      const hfHealthy = await hfService.isHealthy();
      console.log(`   ü§ó HuggingFace API: ${hfHealthy ? '‚úÖ Healthy' : '‚ö†Ô∏è Unavailable (fallback active)'}`);
    }
  }
}

async function runComprehensiveAITests() {
  console.log('üöÄ COMPREHENSIVE AI SERVICES TEST SUITE');
  console.log('=========================================');
  console.log(`üìÑ Testing with resume containing ${testResume.length} characters`);
  console.log(`üéØ Expected to find ${22} key skills\n`);

  const tester = new AIServiceTester();

  try {
    // Run health checks first
    await tester.runHealthChecks();

    // Run main comparison test
    await tester.runProviderComparison();

    // Test skill categorization
    await tester.testSkillCategories();

    console.log('\n‚úÖ ALL TESTS COMPLETED!');
    console.log('=====================================');
    console.log('üéâ AI-002 Google Gemini Integration: READY FOR PRODUCTION');

  } catch (error) {
    console.error('\n‚ùå Test suite failed:', error);
    process.exit(1);
  }
}

// Run the comprehensive test suite
runComprehensiveAITests().catch(console.error);
